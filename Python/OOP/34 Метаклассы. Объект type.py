# Метакласс - это классы, экземпляры которых являются классами.

"""Метаклассы это глубокая магия, о которой 99% пользователей даже не нужно задумываться.
Если вы думаете, нужно ли вам их использовать — вам не нужно (люди, которым они реально нужны,
 точно знают, зачем они им, и не нуждаются в объяснениях, почему).
~ Гуру Питона Тим Питерс"""


# region Динамическое создание класса
# Данная структура
class Point:
    MAX_COORD = 100
    MIN_COORD = 0


# Аналогична данной структуре
A = type("Point", (), {"MAX_COORD": 100, "MIN_COORD": 0})
# type динамически создал класс Point со всеми указанными атрибутами
pt = A()  # создаем экземпляр созданного класса


# endregion

# region Также можно наследовать от других классов, например B1 и B2
class B1:
    pass


class B2:
    pass


A = type("Point", (B1, B2), {"MAX_COORD": 100, "MIN_COORD": 0})
print(A.__mro__)
# endregion

#region Пример с методом внутри
def method1(self):
    print(self.__dict__)
    print("Вызван method1")

A = type("Point", (B1, B2), {"MAX_COORD": 100, "method1": method1})
print(A.__mro__)
pt = A()
pt.method1()

#endregion